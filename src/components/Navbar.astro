---
import { portfolioData } from "../data/portfolioData";
const { sections_portfolio } = portfolioData;
---

<header class="fixed top-0 left-0 right-0 z-50 transition-all duration-300" id="navbar">
  <nav class="bg-white/80 dark:bg-slate-900/80 backdrop-blur-md shadow-sm border-b border-slate-200 dark:border-slate-800 transition-all duration-300">
    <div class="container mx-auto px-4 sm:px-6 lg:px-8">
      <div class="flex items-center justify-between h-16">
        <!-- Logo -->
        <div class="flex-shrink-0 flex items-center">
          <a href="#" class="text-primary-600 dark:text-primary-400 font-bold text-xl font-mono tracking-tight">
            <span class="text-primary-600 dark:text-primary-400">Walker</span>
            <span class="text-secondary-600 dark:text-secondary-400">Portfolio</span>
          </a>
        </div>
        
        <!-- Desktop Nav -->
        <div class="hidden md:block">
          <div class="ml-10 flex items-center space-x-4">
            {sections_portfolio.map((section, index) => (
              <a 
                href={`#${section.toLowerCase()}`} 
                class="nav-link px-3 py-2 rounded-md text-sm font-medium text-slate-700 dark:text-slate-300 hover:text-primary-600 dark:hover:text-primary-400 transition-colors duration-300 relative group"
              >
                {section}
                <span class="absolute bottom-0 left-0 w-0 h-0.5 bg-primary-500 group-hover:w-full transition-all duration-300"></span>
              </a>
            ))}
          </div>
        </div>
        
        <!-- Mobile menu button -->
        <div class="md:hidden flex items-center">
          <button id="mobile-menu-button" class="inline-flex items-center justify-center p-2 rounded-md text-slate-700 dark:text-slate-300 hover:text-primary-600 dark:hover:text-primary-400 focus:outline-none">
            <svg class="h-6 w-6" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path id="menu-icon" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
              <path id="close-icon" class="hidden" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
        </div>
      </div>
    </div>

    <!-- Mobile menu, show/hide based on menu state -->
    <div id="mobile-menu" class="hidden md:hidden border-t border-slate-200 dark:border-slate-800">
      <div class="px-2 pt-2 pb-3 space-y-1 sm:px-3">
        {sections_portfolio.map((section, index) => (
          <a 
            href={`#${section.toLowerCase()}`} 
            class="mobile-nav-link block px-3 py-2 rounded-md text-base font-medium text-slate-700 dark:text-slate-300 hover:bg-slate-100 dark:hover:bg-slate-800 hover:text-primary-600 dark:hover:text-primary-400 transition-colors duration-300"
          >
            {section}
          </a>
        ))}
      </div>
    </div>
  </nav>
</header>

<script>
  // Handle navbar scroll effect
  document.addEventListener('DOMContentLoaded', () => {
    const navbar = document.getElementById('navbar');
    const mobileMenuButton = document.getElementById('mobile-menu-button');
    const mobileMenu = document.getElementById('mobile-menu');
    const menuIcon = document.getElementById('menu-icon');
    const closeIcon = document.getElementById('close-icon');
    
    // Mobile menu toggle
    mobileMenuButton?.addEventListener('click', () => {
      mobileMenu?.classList.toggle('hidden');
      menuIcon?.classList.toggle('hidden');
      closeIcon?.classList.toggle('hidden');
    });
    
    // Close mobile menu when clicking on a link
    const mobileNavLinks = document.querySelectorAll('.mobile-nav-link');
    mobileNavLinks.forEach(link => {
      link.addEventListener('click', () => {
        mobileMenu?.classList.add('hidden');
        menuIcon?.classList.remove('hidden');
        closeIcon?.classList.add('hidden');
      });
    });
    
    // Navbar scroll effect
    window.addEventListener('scroll', () => {
      if (window.scrollY > 10) {
        navbar?.classList.add('shadow-md');
        navbar?.classList.remove('shadow-sm');
      } else {
        navbar?.classList.remove('shadow-md');
        navbar?.classList.add('shadow-sm');
      }
    });
    
    // Active link highlighting based on section
    const sections = document.querySelectorAll('section[id]');
    const navLinks = document.querySelectorAll('.nav-link');
    
    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            const id = entry.target.getAttribute('id');
            navLinks.forEach((link) => {
              if (link.getAttribute('href') === `#${id}`) {
                link.classList.add('text-primary-600', 'dark:text-primary-400');
                link.classList.remove('text-slate-700', 'dark:text-slate-300');
              } else {
                link.classList.remove('text-primary-600', 'dark:text-primary-400');
                link.classList.add('text-slate-700', 'dark:text-slate-300');
              }
            });
          }
        });
      },
      { threshold: 0.5 }
    );
    
    sections.forEach((section) => {
      observer.observe(section);
    });
  });
</script>